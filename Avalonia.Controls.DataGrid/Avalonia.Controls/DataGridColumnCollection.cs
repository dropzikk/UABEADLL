using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Avalonia.Controls;

internal class DataGridColumnCollection : ObservableCollection<DataGridColumn>
{
	private readonly Dictionary<int, int> _columnsMap = new Dictionary<int, int>();

	private readonly DataGrid _owningGrid;

	internal int AutogeneratedColumnCount { get; set; }

	internal List<int> DisplayIndexMap { get; set; }

	internal DataGridFillerColumn FillerColumn { get; private set; }

	internal DataGridColumn FirstColumn => GetFirstColumn(null, null, null);

	internal DataGridColumn FirstVisibleColumn => GetFirstColumn(true, null, null);

	internal DataGridColumn FirstVisibleNonFillerColumn
	{
		get
		{
			DataGridColumn dataGridColumn = FirstVisibleColumn;
			if (dataGridColumn == RowGroupSpacerColumn)
			{
				dataGridColumn = GetNextVisibleColumn(dataGridColumn);
			}
			return dataGridColumn;
		}
	}

	internal DataGridColumn FirstVisibleWritableColumn => GetFirstColumn(true, null, false);

	internal DataGridColumn FirstVisibleScrollingColumn => GetFirstColumn(true, false, null);

	internal List<DataGridColumn> ItemsInternal { get; private set; }

	internal DataGridColumn LastVisibleColumn => GetLastColumn(true, null, null);

	internal DataGridColumn LastVisibleScrollingColumn => GetLastColumn(true, false, null);

	internal DataGridColumn LastVisibleWritableColumn => GetLastColumn(true, null, false);

	internal DataGridFillerColumn RowGroupSpacerColumn { get; private set; }

	internal int VisibleColumnCount { get; private set; }

	internal double VisibleEdgedColumnsWidth { get; private set; }

	internal int VisibleStarColumnCount { get; private set; }

	public DataGridColumnCollection(DataGrid owningGrid)
	{
		_owningGrid = owningGrid;
		ItemsInternal = new List<DataGridColumn>();
		FillerColumn = new DataGridFillerColumn(owningGrid);
		RowGroupSpacerColumn = new DataGridFillerColumn(owningGrid);
		DisplayIndexMap = new List<int>();
	}

	protected override void ClearItems()
	{
		try
		{
			_owningGrid.NoCurrentCellChangeCount++;
			if (ItemsInternal.Count > 0)
			{
				if (_owningGrid.InDisplayIndexAdjustments)
				{
					throw DataGridError.DataGrid.CannotChangeColumnCollectionWhileAdjustingDisplayIndexes();
				}
				_owningGrid.OnClearingColumns();
				for (int i = 0; i < ItemsInternal.Count; i++)
				{
					ItemsInternal[i].OwningGrid = null;
				}
				ItemsInternal.Clear();
				DisplayIndexMap.Clear();
				AutogeneratedColumnCount = 0;
				_owningGrid.OnColumnCollectionChanged_PreNotification(columnsGrew: false);
				base.ClearItems();
				VisibleEdgedColumnsWidth = 0.0;
				_owningGrid.OnColumnCollectionChanged_PostNotification(columnsGrew: false);
			}
		}
		finally
		{
			_owningGrid.NoCurrentCellChangeCount--;
		}
	}

	protected override void InsertItem(int columnIndex, DataGridColumn dataGridColumn)
	{
		try
		{
			_owningGrid.NoCurrentCellChangeCount++;
			if (_owningGrid.InDisplayIndexAdjustments)
			{
				throw DataGridError.DataGrid.CannotChangeColumnCollectionWhileAdjustingDisplayIndexes();
			}
			if (dataGridColumn == null)
			{
				throw new ArgumentNullException("dataGridColumn");
			}
			int num = columnIndex;
			if (dataGridColumn != RowGroupSpacerColumn && RowGroupSpacerColumn.IsRepresented)
			{
				num++;
			}
			DataGridCellCoordinates newCurrentCellCoordinates = _owningGrid.OnInsertingColumn(columnIndex, dataGridColumn);
			ItemsInternal.Insert(num, dataGridColumn);
			dataGridColumn.Index = num;
			dataGridColumn.OwningGrid = _owningGrid;
			dataGridColumn.RemoveEditingElement();
			if (dataGridColumn.IsVisible)
			{
				VisibleEdgedColumnsWidth += dataGridColumn.ActualWidth;
			}
			_owningGrid.OnInsertedColumn_PreNotification(dataGridColumn);
			_owningGrid.OnColumnCollectionChanged_PreNotification(columnsGrew: true);
			if (dataGridColumn != RowGroupSpacerColumn)
			{
				base.InsertItem(columnIndex, dataGridColumn);
			}
			_owningGrid.OnInsertedColumn_PostNotification(newCurrentCellCoordinates, dataGridColumn.DisplayIndex);
			_owningGrid.OnColumnCollectionChanged_PostNotification(columnsGrew: true);
		}
		finally
		{
			_owningGrid.NoCurrentCellChangeCount--;
		}
	}

	protected override void RemoveItem(int columnIndex)
	{
		RemoveItemPrivate(columnIndex, isSpacer: false);
	}

	protected override void SetItem(int columnIndex, DataGridColumn dataGridColumn)
	{
		throw new NotSupportedException();
	}

	internal bool DisplayInOrder(int columnIndex1, int columnIndex2)
	{
		int displayIndexWithFiller = ItemsInternal[columnIndex1].DisplayIndexWithFiller;
		int displayIndexWithFiller2 = ItemsInternal[columnIndex2].DisplayIndexWithFiller;
		return displayIndexWithFiller < displayIndexWithFiller2;
	}

	internal bool EnsureRowGrouping(bool rowGrouping)
	{
		bool flag = ItemsInternal.Count > 0 && ItemsInternal[0] == RowGroupSpacerColumn;
		if (rowGrouping && !flag)
		{
			Insert(0, RowGroupSpacerColumn);
			RowGroupSpacerColumn.IsRepresented = true;
			return true;
		}
		if (!rowGrouping && flag)
		{
			RowGroupSpacerColumn.IsRepresented = false;
			RemoveItemPrivate(0, isSpacer: true);
			return true;
		}
		return false;
	}

	internal void EnsureVisibleEdgedColumnsWidth()
	{
		VisibleStarColumnCount = 0;
		VisibleEdgedColumnsWidth = 0.0;
		VisibleColumnCount = 0;
		_columnsMap.Clear();
		for (int i = 0; i < ItemsInternal.Count; i++)
		{
			DataGridColumn dataGridColumn = ItemsInternal[i];
			_columnsMap[i] = dataGridColumn.DisplayIndex;
			if (dataGridColumn.IsVisible)
			{
				VisibleColumnCount++;
				dataGridColumn.EnsureWidth();
				if (dataGridColumn.Width.IsStar)
				{
					VisibleStarColumnCount++;
				}
				VisibleEdgedColumnsWidth += dataGridColumn.ActualWidth;
			}
		}
	}

	internal int GetColumnDisplayIndex(int columnIndex)
	{
		if (!_columnsMap.TryGetValue(columnIndex, out var value))
		{
			return -1;
		}
		return value;
	}

	internal DataGridColumn GetColumnAtDisplayIndex(int displayIndex)
	{
		if (displayIndex < 0 || displayIndex >= ItemsInternal.Count || displayIndex >= DisplayIndexMap.Count)
		{
			return null;
		}
		int index = DisplayIndexMap[displayIndex];
		return ItemsInternal[index];
	}

	internal int GetColumnCount(bool isVisible, bool isFrozen, int fromColumnIndex, int toColumnIndex)
	{
		int num = 0;
		DataGridColumn dataGridColumn = ItemsInternal[fromColumnIndex];
		while (dataGridColumn != ItemsInternal[toColumnIndex])
		{
			dataGridColumn = GetNextColumn(dataGridColumn, isVisible, isFrozen, null);
			num++;
		}
		return num;
	}

	internal IEnumerable<DataGridColumn> GetDisplayedColumns()
	{
		foreach (int item in DisplayIndexMap)
		{
			yield return ItemsInternal[item];
		}
	}

	internal IEnumerable<DataGridColumn> GetDisplayedColumns(Predicate<DataGridColumn> filter)
	{
		foreach (int item in DisplayIndexMap)
		{
			DataGridColumn dataGridColumn = ItemsInternal[item];
			if (filter(dataGridColumn))
			{
				yield return dataGridColumn;
			}
		}
	}

	internal IEnumerable<DataGridColumn> GetDisplayedColumns(bool reverse, Predicate<DataGridColumn> filter)
	{
		if (!reverse)
		{
			return GetDisplayedColumns(filter);
		}
		return GetDisplayedColumnsReverse(filter);
	}

	internal IEnumerable<DataGridColumn> GetDisplayedColumnsReverse(Predicate<DataGridColumn> filter)
	{
		for (int displayIndex = DisplayIndexMap.Count - 1; displayIndex >= 0; displayIndex--)
		{
			DataGridColumn dataGridColumn = ItemsInternal[DisplayIndexMap[displayIndex]];
			if (filter(dataGridColumn))
			{
				yield return dataGridColumn;
			}
		}
	}

	internal DataGridColumn GetFirstColumn(bool? isVisible, bool? isFrozen, bool? isReadOnly)
	{
		for (int i = 0; i < DisplayIndexMap.Count; i++)
		{
			DataGridColumn columnAtDisplayIndex = GetColumnAtDisplayIndex(i);
			if ((!isVisible.HasValue || columnAtDisplayIndex.IsVisible == isVisible) && (!isFrozen.HasValue || columnAtDisplayIndex.IsFrozen == isFrozen) && (!isReadOnly.HasValue || columnAtDisplayIndex.IsReadOnly == isReadOnly))
			{
				return columnAtDisplayIndex;
			}
		}
		return null;
	}

	internal DataGridColumn GetLastColumn(bool? isVisible, bool? isFrozen, bool? isReadOnly)
	{
		for (int num = DisplayIndexMap.Count - 1; num >= 0; num--)
		{
			DataGridColumn columnAtDisplayIndex = GetColumnAtDisplayIndex(num);
			if ((!isVisible.HasValue || columnAtDisplayIndex.IsVisible == isVisible) && (!isFrozen.HasValue || columnAtDisplayIndex.IsFrozen == isFrozen) && (!isReadOnly.HasValue || columnAtDisplayIndex.IsReadOnly == isReadOnly))
			{
				return columnAtDisplayIndex;
			}
		}
		return null;
	}

	internal DataGridColumn GetNextColumn(DataGridColumn dataGridColumnStart)
	{
		return GetNextColumn(dataGridColumnStart, null, null, null);
	}

	internal DataGridColumn GetNextColumn(DataGridColumn dataGridColumnStart, bool? isVisible, bool? isFrozen, bool? isReadOnly)
	{
		for (int i = dataGridColumnStart.DisplayIndexWithFiller + 1; i < DisplayIndexMap.Count; i++)
		{
			DataGridColumn columnAtDisplayIndex = GetColumnAtDisplayIndex(i);
			if ((!isVisible.HasValue || columnAtDisplayIndex.IsVisible == isVisible) && (!isFrozen.HasValue || columnAtDisplayIndex.IsFrozen == isFrozen) && (!isReadOnly.HasValue || columnAtDisplayIndex.IsReadOnly == isReadOnly))
			{
				return columnAtDisplayIndex;
			}
		}
		return null;
	}

	internal DataGridColumn GetNextVisibleColumn(DataGridColumn dataGridColumnStart)
	{
		return GetNextColumn(dataGridColumnStart, true, null, null);
	}

	internal DataGridColumn GetNextVisibleFrozenColumn(DataGridColumn dataGridColumnStart)
	{
		return GetNextColumn(dataGridColumnStart, true, true, null);
	}

	internal DataGridColumn GetNextVisibleWritableColumn(DataGridColumn dataGridColumnStart)
	{
		return GetNextColumn(dataGridColumnStart, true, null, false);
	}

	internal DataGridColumn GetPreviousColumn(DataGridColumn dataGridColumnStart, bool? isVisible, bool? isFrozen, bool? isReadOnly)
	{
		for (int num = dataGridColumnStart.DisplayIndexWithFiller - 1; num >= 0; num--)
		{
			DataGridColumn columnAtDisplayIndex = GetColumnAtDisplayIndex(num);
			if ((!isVisible.HasValue || columnAtDisplayIndex.IsVisible == isVisible) && (!isFrozen.HasValue || columnAtDisplayIndex.IsFrozen == isFrozen) && (!isReadOnly.HasValue || columnAtDisplayIndex.IsReadOnly == isReadOnly))
			{
				return columnAtDisplayIndex;
			}
		}
		return null;
	}

	internal DataGridColumn GetPreviousVisibleNonFillerColumn(DataGridColumn dataGridColumnStart)
	{
		DataGridColumn previousColumn = GetPreviousColumn(dataGridColumnStart, true, null, null);
		if (!(previousColumn is DataGridFillerColumn))
		{
			return previousColumn;
		}
		return null;
	}

	internal DataGridColumn GetPreviousVisibleScrollingColumn(DataGridColumn dataGridColumnStart)
	{
		return GetPreviousColumn(dataGridColumnStart, true, false, null);
	}

	internal DataGridColumn GetPreviousVisibleWritableColumn(DataGridColumn dataGridColumnStart)
	{
		return GetPreviousColumn(dataGridColumnStart, true, null, false);
	}

	internal int GetVisibleColumnCount(int fromColumnIndex, int toColumnIndex)
	{
		int num = 0;
		DataGridColumn dataGridColumn = ItemsInternal[fromColumnIndex];
		while (dataGridColumn != ItemsInternal[toColumnIndex])
		{
			dataGridColumn = GetNextVisibleColumn(dataGridColumn);
			num++;
		}
		return num;
	}

	internal IEnumerable<DataGridColumn> GetVisibleColumns()
	{
		Predicate<DataGridColumn> filter = (DataGridColumn column) => column.IsVisible;
		return GetDisplayedColumns(filter);
	}

	internal IEnumerable<DataGridColumn> GetVisibleFrozenColumns()
	{
		Predicate<DataGridColumn> filter = (DataGridColumn column) => column.IsVisible && column.IsFrozen;
		return GetDisplayedColumns(filter);
	}

	internal double GetVisibleFrozenEdgedColumnsWidth()
	{
		double num = 0.0;
		for (int i = 0; i < ItemsInternal.Count; i++)
		{
			if (ItemsInternal[i].IsVisible && ItemsInternal[i].IsFrozen)
			{
				num += ItemsInternal[i].ActualWidth;
			}
		}
		return num;
	}

	internal IEnumerable<DataGridColumn> GetVisibleScrollingColumns()
	{
		Predicate<DataGridColumn> filter = (DataGridColumn column) => column.IsVisible && !column.IsFrozen;
		return GetDisplayedColumns(filter);
	}

	private void RemoveItemPrivate(int columnIndex, bool isSpacer)
	{
		try
		{
			_owningGrid.NoCurrentCellChangeCount++;
			if (_owningGrid.InDisplayIndexAdjustments)
			{
				throw DataGridError.DataGrid.CannotChangeColumnCollectionWhileAdjustingDisplayIndexes();
			}
			int num = columnIndex;
			if (!isSpacer && RowGroupSpacerColumn.IsRepresented)
			{
				num++;
			}
			DataGridColumn dataGridColumn = ItemsInternal[num];
			DataGridCellCoordinates newCurrentCellCoordinates = _owningGrid.OnRemovingColumn(dataGridColumn);
			ItemsInternal.RemoveAt(num);
			if (dataGridColumn.IsVisible)
			{
				VisibleEdgedColumnsWidth -= dataGridColumn.ActualWidth;
			}
			dataGridColumn.OwningGrid = null;
			dataGridColumn.RemoveEditingElement();
			_owningGrid.OnRemovedColumn_PreNotification(dataGridColumn);
			_owningGrid.OnColumnCollectionChanged_PreNotification(columnsGrew: false);
			if (!isSpacer)
			{
				base.RemoveItem(columnIndex);
			}
			_owningGrid.OnRemovedColumn_PostNotification(newCurrentCellCoordinates);
			_owningGrid.OnColumnCollectionChanged_PostNotification(columnsGrew: false);
		}
		finally
		{
			_owningGrid.NoCurrentCellChangeCount--;
		}
	}
}
